using Dapper;
using FirebirdSql.Data.FirebirdClient;
using System;
using System.IO;

namespace l2l_aggregator.Services.Database
{
    public class DatabaseInitializer
    {
        private readonly string _databasePath;
        private readonly string _connectionString;
        public DatabaseInitializer(string databasePath)
        {
            _databasePath = databasePath;
            _connectionString = $"Server=localhost; Database={_databasePath}; User=SYSDBA; Password=masterkey; Charset=UTF8;";
        }
        public FbConnection GetConnection()
        {
            if (!File.Exists(_databasePath))
            {
                CreateDataBase();
            }
            var connection = new FbConnection(_connectionString);
            connection.Open();
            return connection;
        }
        private void CreateDataBase()
        {
            try
            {
                FbConnection.CreateDatabase(_connectionString);
                CreateRegistrationInfoTable();
                CreateConfigTable();
                CreateUserAuthTable();
                CreateAdminUserTable();
                CreateNotificationLogTable();
                CreateAggregationStateTable();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error creating database: {ex.Message}");
                throw;
            }
        }
        private void CreateRegistrationInfoTable()
        {
            using (var connection = new FbConnection(_connectionString))
            {
                connection.Open();
                connection.Execute(@"
                    CREATE TABLE REGISTRATION_INFO (
                        DEVICEID VARCHAR(50) NOT NULL PRIMARY KEY,
                        DEVICE_NAME VARCHAR(100) NOT NULL,
                        LICENSE_DATA BLOB SUB_TYPE TEXT,
                        SETTINGS_DATA BLOB SUB_TYPE TEXT
                    );"
                );
            }
        }
        private void CreateConfigTable()
        {
            using (var connection = new FbConnection(_connectionString))
            {
                connection.Open();
                connection.Execute(@"
                    CREATE TABLE CONFIG_INFO (
                        CONFIG_KEY VARCHAR(100) NOT NULL PRIMARY KEY,
                        CONFIG_VALUE VARCHAR(255) NOT NULL
                    );"
                );
            }
        }
        public void CreateUserAuthTable()
        {
            using (var connection = new FbConnection(_connectionString))
            {
                connection.Open();
                connection.Execute(@"
                                CREATE TABLE USER_AUTH_INFO (
                                    USERID VARCHAR(50) PRIMARY KEY,
                                    USER_NAME VARCHAR(255),
                                    PERSONID VARCHAR(50),
                                    PERSON_NAME VARCHAR(255),
                                    PERSON_DELETE_FLAG CHAR(1),
                                    AUTH_OK CHAR(1),
                                    ERROR_TEXT VARCHAR(255),
                                    NEED_CHANGE_FLAG CHAR(1),
                                    EXPIRATION_DATE TIMESTAMP,
                                    REC_TYPE INT
                                    )"
                );
                connection.Execute("INSERT INTO USER_AUTH_INFO (USERID, USER_NAME) VALUES (@userid, @username)",
                    new { userid = "1", username = "admin" });
            }
        }
        public void CreateAdminUserTable()
        {
            using (var connection = new FbConnection(_connectionString))
            {
                connection.Open();
                connection.Execute(@"
                    CREATE TABLE ADMIN_USERS (
                        ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        USERNAME VARCHAR(50) UNIQUE NOT NULL,
                        PASSWORD VARCHAR(255) NOT NULL
                    );"
                );
                connection.Execute("INSERT INTO ADMIN_USERS (USERNAME, PASSWORD) VALUES (@username, @password)",
                    new { username = "admin", password = "admin" });
            }
        }
        public void CreateNotificationLogTable()
        {
            using var connection = new FbConnection(_connectionString);
            connection.Open();
            connection.Execute(@"
                CREATE TABLE NOTIFICATION_LOG (
                    ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    MESSAGE VARCHAR(500),
                    TYPE VARCHAR(20),
                    USERNAME VARCHAR(100),
                    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );");
        }

        public void CreateAggregationStateTable()
        {
            using var connection = new FbConnection(_connectionString);
            connection.Open();
            connection.Execute(@"
                CREATE TABLE AGGREGATION_STATE (
                    ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    USERNAME VARCHAR(100),
                    TASK_ID BIGINT,
                    TEMPLATE_JSON BLOB SUB_TYPE TEXT,
                    PROGRESS_JSON BLOB SUB_TYPE TEXT,
                    TASK_INFO_JSON BLOB SUB_TYPE TEXT,
                    LAST_UPDATED TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );");
        }
    }
}
